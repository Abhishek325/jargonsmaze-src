 [
    {
        "id":3,
        "title":"Implementing OCR on live video stream",
        "subtitle": "A month long internship spent well implementing something cool at ITC",
        "content": "I am a huge fan of Iron Man's Jarvis and so everything related to computer vision, simply excites me. Fortunately, I  had once got this chance to embrace my excitement and build something cool. This was the time back in my college days when I got an internship at ITC.<br>The requirement for the project was to develop an ADAS (Advanced Driver Assistance Systems) based program that could recognize the text part(s) in a video (captured from the dashboard cameras of automobiles)<br><br><div class='lead mb-3 text-mono text-success'> Project Execution:</div>Though I was excited I wasn't sure on how to get started <small>(Did that just rap)</small>. So, as a potential engineer, I started googling stuff and reading about Image processing. After few hours of reading, I was able to start with the implementation.<br><br>As a beginner, I chose <code>Python</code> as my programming language and <code>opencv</code> as the library to start with real time computer vision. Since <code>opencv</code> is open source, it is very simple to go through the documentation and implement the same on your project (with minor changes). <br>Face detection was the first thing I had implemented with all my knowledge (gained in 2-3 hours of reading) and then facial features (eyes, nose and mouth) detection.  Initially, all this was happening through a program (wirtten in Python) that reads a supplied image and plots a rectangle around the face features but then I changed it to work the same way for a live stream video too. The logic is simple, earlier the program was expecting one image but this time I had to supply a video i.e. multiple frames. So, loop around for each frame with the same logic and you are done.<br><br> Now that I had got good hands on <code>opencv</code>, I started with main requirement i.e. OCR on live video stream. The flow remains the same here. Earlier the program was performing face detection and now I had to change it to perform OCR, on live video stream. OCR basically stands for <code>Optical character recognition,</code> a mechanism of converting images to text, basically. After checking lot of websites and reading lot of articles online, I got to know about the <code>tesseract-ocr</code>. It is an open-source OCR engine maintained by Google. There is already good amount of papers published and researches done on tesseract. One of them which I had referred and presented for my technical seminar was <a href='https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/33418.pdf' target='_new'>this</a> one.<br><br> Programmatically, tesseract takes one image at a time and then writes the corresponding recognised text into a text file. Also, there are few tricks while using tesseract that gets more efficient results. For e.g. tesseract works the best or most efficient when the image is gray scale. So, all I did was to integrate the tesseract command in my program. Everytime tesseract executes, it writes a file with the name that is passed to it (as argument) while invoking the execution. So, for every frame of the live stream, I converted the frame to gray scale (using opencv's built in functions) and read the text from the text file updated by tesseract. And there you go, the live stream OCR is ready!<br><br>The code for this project is available in <a href='https://github.com/Abhishek325/OCR-live-stream'>this</a> repository. Fork it on github if you like it!",
        "publishedOn": "October 14, 2018"
    },
    {
        "id":2,
        "title":"Hosting a website locally with WAMP server",
        "subtitle": "Instructions to set up your WAMP to host a website project locally on your machine",
        "content": "",
        "publishedOn": "September 26, 2018"
    },
    {
        "id": 1,
        "title": "Connecting to your server's FTP via SSH (in windows)",
        "subtitle": "A guide to enable SSH and connect to remote server via SSH protocol",
        "content": " SSH is typically used to log into a remote machine and execute commands providing a strong authentication and secure encrypted data communications between two computers connecting over an insecure network such as the Internet.<br> I got to work with SSH for the first time in 2015 when me and my project mate were implementing a PHP based website.We were hosting this website on a server in <a href='https://www.openshift.com/' target='_new'>OpenShift</a> platform and since we used Ubuntu, pushing the files from our localhost to server's FTP with <a     href='http://www.linuxandubuntu.com/home/terminator-a-linux-terminal-emulator-with-multiple-terminals-in-one-window'     target='_new'>Terminator</a> was real quick.<br>I had got a similar chance a couple of days back when I had to install <code>node.js</code> on one of my cPanel hostings to host an <code>express.js</code> based API. The hosting and domain were both registered with third party (GoDaddy) and so I get very limited access to core developement tools like server's shell/bash etc. So this lead to the necessity of having a SSH based access to my server which could allow me to install all the <code>npm</code> based packages and let me expose my <i>express.js</i> based API on one of the ports. <br> <br>This is done in the following way: <ol>     <li> Find for the &quot;Security&quot; section on your cPanel dashboard and click on &quot;SSH Access&quot; utility.     </li>     <li>You will see a popup thats prompts you to confirm that you want to Enable SSH for your website.<br> <footer class='blockquote-footer'> This is more of a warning given by the cPanel to remind you that enabling SSH allows you (or someone else) to access your server from anywhere across the internet. </footer>     </li>     <li> Once you click on the <a class='btn btn-success btn-shadow px-2 my-2 ml-0 text-left'>Enable</a> &nbsp;button, your server is now open to be accessed through SSH.</li> </ol> <div class='lead mb-3 text-mono text-success'>Connecting the server once SSH access is enabled : </div> Since Windows-based Operating Systems do not come with an SSH client by default, <a href='https://www.putty.org/' target='_new'>PuTTY</a> is one of most used applications for serving the purpose. Follow the below steps to connect to your server with PuTTY: <ol><li>In the &quot;Host Name (or IP address)&quot; field, enter your username for the cPanel login suffixed with domain name. <br> <div class='text-grey text-spacey'>For e.g. if the username is <u>johnDoe2018</u> and domain name is <u>example.in</u> then the Host Name is <u>johnDoe2018@example.in</u>.</div> </li> <li>Enter the Port as &quot;22&quot; and select the Connection Type as SSH in the PuTTY app. </li> <li>Click on open button at the bottom of the PuTTY window. </li> <li>Enter the password (same as what was entered while logging in to the cPanel) and hit Enter key. <br>Wait for few seconds until your server's directories appear on the console. </li></ol> Thats it! We are now connected to the server via SSH.<br> Any package install that was locally done through <code>npm</code>, <code>sudo</code>, <code>yum</code> etc. can now be done on the server using this session.",
        "publishedOn": "September 4, 2018"
    }
]